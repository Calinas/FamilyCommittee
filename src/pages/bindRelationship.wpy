<template lang="wxml" minapp="wepy">
  <view class="common-container common-container-grey">
    <view class="remind-text">
      <text class="red">*</text>
      <text>必填项</text>
    </view>
    <view class="flex-wrapper center choose-item">
      <view class="choose-tag">
        <!-- 这里是个必选项，不可能让用户补选中 -->
        <view class="choose-tag-inner"></view>
      </view>
      <input type="text" placeholder="请输入孩子姓名" id="studentName" @input="bindForm"/>
      <picker class="picker" mode="selector" value="{{parentIndex}}" range="{{relationship}}" range-key="name" @change="bindForm" id="parentIndex">
        <text>的{{relationship[parentIndex].name}}</text>
      </picker>
    </view>
    <view class="remind-text">
      <text class="red">*</text>
      <text>选填项(如果您不是老师身份，请勿勾选)</text>
    </view>
    <view class="flex-wrapper center choose-item">
      <view class="choose-tag" @tap="selectTeacher">
        <view class="choose-tag-inner" wx:if="{{isTeacher}}"></view>
      </view>
      <input type="text" placeholder="请输入您的姓名" @input="bindForm" id="teacherName"/>
      <text class="picker">老师</text>
    </view>
    <view class="common-line text-center font-green" style="margin-top: 600rpx;" @tap="submit">确认提交</view>
  </view>

</template>

<script>
import wepy from 'wepy'
import { getIdentityList, bindIDentity } from '../api/user'
import { addClass } from '../api/createClass'
import { showMsg, isEmptyString } from '../utils/common'
export default class bindRelationship extends wepy.page {
  config = {
    navigationBarTitleText: '身份绑定'
  }
  data = {
    relationship: [],
    parentIndex: 0,
    isTeacher: false,
    teacherName: '',
    canSubmit: false,
    studentName: '',
    list: [],
    memberInfo: null,
    classId: -1
  }
  watch = {
    studentName (newValue, oldValue) {
      this.canSubmit = !isEmptyString(newValue)
    }
  }
  onLoad() {
    const globalData = this.$parent.globalData
    this.memberInfo = globalData.memberInfo
    this.classInfo = globalData.classInfo
    this.$apply()
  }
  methods = {
    bindForm(e) {
      this[e.currentTarget.id] = e.detail.value
      this.$apply()
    },
    selectTeacher() {
      this.isTeacher = !this.isTeacher
      this.$apply()
    },
    submit() {
      if (!this.canSubmit) {
        showMsg('请填写您孩子姓名')
        return
      }
      if (this.checkCanSubmit()) {
        const obj = {
          identity_id: this.parentIndex,
          student_name: this.studentName
        }
        this.list.push(obj)
        // TODO 老师的身份是多少
        if (this.isTeacher) {
          const teacherArr = {
            identity_id: 2,
            student_name: this.teacherName
          }
          this.list.push(teacherArr)
        }
        this.$apply()
        bindIDentity({
          class_id: this.classId,
          list: this.list
        }).then(res => {})
      }
    }
  }
  getClassId() {
    let data = this.$parent.globalData.createClass
    addClass({
      school_id: data.school_id,
      grade: data.grade,
      year: data.year,
      class: data.class
    }).then(res => {

      this.classId = res.data.data.id
      this.$apply()
    })
  }
  checkCanSubmit() {
    if (this.isTeacher && isEmptyString(this.teacherName)) {
      showMsg('如果您勾选了老师身份，请填写您的姓名')
      return false
    }
    return true
  }
  getRelationShip() {
    getIdentityList().then(res => {
      this.relationship = res.data.list
      this.$apply()
    })
  }
  onLoad() {
    this.getClassId()
    this.getRelationShip()
  }
}
</script>

<style lang="scss">
@import '../styles/buttons.wxss';
.remind-text {
  padding-bottom: 20rpx;
  .red {
    color: #982424;
    margin-right: 20rpx;
  }
}
.choose-tag {
  position: relative;
  width: 30rpx;
  height: 30rpx;
  border: 6rpx solid #2DB200;
  margin-right: 30rpx;
  border-radius: 50%;
}
.choose-tag-inner {
  position: absolute;
  width: 15rpx;
  height: 15rpx;
  background-color: #2DB200;
  opacity: .8;
  left: 0;
  right: 0;
  bottom: 0;
  top: 0;
  margin: auto;
  border-radius: 50%;
}
.choose-item {
  margin-bottom: 30rpx;
}
.choose-item input {
  padding:20rpx 0;
  background-color:#fff;
  flex: 1;
  padding-left: 30rpx;
}
.choose-item .picker {
  padding:20rpx 0;
  width: 140rpx;
  margin-left: 30rpx;
  background-color: #fff;
  min-height: 1.4rem;
  line-height: 1.4rem;
  text-align: center;
}
</style>
