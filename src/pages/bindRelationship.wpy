<template lang="wxml" minapp="wepy">
  <view class="common-container common-container-grey">
    <view class="remind-text">
      <text class="red">*</text>
      <text>必填项</text>
    </view>
    <view class="flex-wrapper center choose-item" wx:for="{{list}}" wx:key="key" wx:for-index="idx">
      <input type="text" placeholder="请输入孩子姓名" id="studentName" @input="bindForm" id="value" data-idx="{{idx}}" value="{{item.value}}"/>
      <picker class="picker" mode="selector" value="{{item.activeIndex}}" range="{{item.relationship}}" range-key="name" @change="bindForm" data-idx="{{idx}}" id="activeIndex">
        <text>的{{item.relationship[item.activeIndex].name}}</text>
        <text class="iconfont icon-arrow-right" style="font-size: 30rpx;"></text>
      </picker>
      <view class="icon-wrapper" @tap="delete({{idx}})">
        <text class="iconfont icon-delete" wx:if="{{idx > 0}}"></view>
      </view>
    </view>
  </view>
  <view class="fixed-bottom-btn flex-wrapper fixed-bottom-btn-1">
    <view class="btn-white" @tap="addNew">新增一项</view>
    <view @tap="submit">确认提交</view>
  </view>
</template>

<script>
import wepy from 'wepy'
import { getIdentityList, bindIdentity, identityList } from '../api/user'
import { addClass } from '../api/createClass'
import { showMsg, isEmptyString } from '../utils/common'
export default class bindRelationship extends wepy.page {
  config = {
    navigationBarTitleText: '身份绑定'
  }
  data = {
    relationship: [],
    parentIndex: 0,
    isTeacher: false,
    teacherName: '',
    canSubmit: false,
    studentName: '',
    list: [],
    memberInfo: null,
    classInfo: null,
    classId: -1,
    joinClassId: 0,
    classIdentityList: [],
    type: ''
  }
  watch = {
    studentName (newValue, oldValue) {
      this.canSubmit = !isEmptyString(newValue)
    }
  }
  onLoad(e) {
    this.memberInfo = wx.getStorageSync('memberInfo')
    this.classInfo = wx.getStorageSync('classInfo')
    this.joinClassId = e.id
    this.type = e.type
    this.getRelationShip()
    this.$apply()
  }
  addClassCallback(data, filterList) {
    addClass(Object.assign({}, data, {
      item: filterList
    })).then(res => {
      this.commonFn(res)
    })
  }
  joinClassCallback(id, filterList) {
    bindIdentity({
      class_id: id,
      item: filterList
    }).then(res => {
      this.commonFn(res)
    })
  }
  commonFn(res) {
    if (res.data.success) {
      showMsg('班级创建成功')
      let data = res.data.data
      let url = `createClassSuccess?name=${data.name}&code=${data.qr_code}&key=${data.join_key}`
      this.$parent.globalData.classHasChange = true
      setTimeout(() => {
        wx.navigateTo({
          url: url
        })
      }, 1000)
    }
  }
  getClassIdentity() {
    identityList({
      class_id: this.classInfo.id
    }).then(res => {
      this.list = res.data.list.map(item => {
        return {
          relationship: this.relationship,
          value: item.student.name,
          activeIndex: item.identity.id - 1,
          id: item.id
        }
      })
      this.$apply()
    })
  }
  methods = {
    delete(idx) {
      this.list.splice(idx, 1)
      this.$apply()
    },
    addNew() {
      const item = {
        relationship: this.relationship,
        value: '',
        activeIndex: 0
      }
      this.list.push(item)
      this.$apply()
    },
    bindForm(e) {
      const target = e.currentTarget
      const idx = target.dataset.idx
      this.list[idx][target.id] = e.detail.value
      this.$apply()
    },
    selectTeacher() {
      this.isTeacher = !this.isTeacher
      this.$apply()
    },
    submit() {
      if (!this.checkData()) {
        showMsg('请填写您孩子姓名')
        return
      }
      let filterList = this.list.map(item => {
        return {
          identity_id: item.relationship[item.activeIndex].id,
          student_name: item.value
        }
      })
      if (this.type) { // 如果是直接修改身份绑定
        filterList = this.list.map(item => {
          return {
            identity_id: item.relationship[item.activeIndex].id,
            student_name: item.value,
            member_identity_id: item.id
          }
        })
        this.joinClassCallback(this.classInfo.id, filterList)
      } else if (!this.joinClassId) { // 如果是创建班级得
        let createClassData = this.$parent.globalData.createClass
        let data = {
          school_id: createClassData.school_id,
          grade_type: createClassData.grade,
          year_class: createClassData.year,
          class: createClassData.class
        }
        this.addClassCallback(data, filterList)
      } else { // 如果是加入班级
        this.joinClassId && this.joinClassCallback(this.joinClassId, filterList)
      }
    }
  }
  checkCanSubmit() {
    if (this.isTeacher && isEmptyString(this.teacherName)) {
      showMsg('如果您勾选了老师身份，请填写您的姓名')
      return false
    }
    return true
  }
  checkData() {
    let canSubmit = true
    for (let i = 0, len = this.list.length; i < len; i++) {
      if (isEmptyString(this.list[i].value)) {
        canSubmit = false
        break
      } else {
        canSubmit = true
      }
    }
    return canSubmit
  }
  getRelationShip() {
    getIdentityList().then(res => {
      this.relationship = res.data.list
      const item = {
        relationship: this.relationship,
        value: '',
        activeIndex: 0
      }
      this.list.push(item)
      this.type && this.getClassIdentity()
      this.$apply()
    })
  }
}
</script>

<style lang="scss">
@import '../styles/buttons.wxss';
.icon-wrapper {
  width: 10%;
}
.icon-delete {
  padding-left: 20rpx;
}
.fixed-bottom-btn {
  & > view {
    flex: 1;
    &.btn-white {
      background-color: #fff;
    }
  }
}
.remind-text {
  padding-bottom: 20rpx;
  .red {
    color: #982424;
    margin-right: 20rpx;
  }
}
.choose-tag {
  position: relative;
  width: 30rpx;
  height: 30rpx;
  border: 6rpx solid #2DB200;
  margin-right: 30rpx;
  border-radius: 50%;
}
.choose-tag-inner {
  position: absolute;
  width: 15rpx;
  height: 15rpx;
  background-color: #2DB200;
  opacity: .8;
  left: 0;
  right: 0;
  bottom: 0;
  top: 0;
  margin: auto;
  border-radius: 50%;
}
.choose-item {
  margin-bottom: 30rpx;
}
.choose-item input {
  padding:20rpx 0;
  background-color:#fff;
  flex: 1;
  padding-left: 30rpx;
}
.choose-item .picker {
  padding:20rpx 0;
  width: 140rpx;
  margin-left: 30rpx;
  background-color: #fff;
  min-height: 1.4rem;
  line-height: 1.4rem;
  text-align: center;
}
</style>
