<template lang="wxml" minapp="wepy">
  <view class="common-container common-container-grey" style="padding-top:120rpx;">
    <radio-group class="radio-group" @change="pickerChange" id="currentType">
        <label class="radio" wx:for="{{relationshipTypes}}">
          <radio value="{{item.value}}" checked="{{item.checked}}" />
          {{item.label}}
        </label>
      </radio-group>
    <block wx:if="{{currentType === 'parents'}}">
      <view class="flex-wrapper center choose-item" wx:for="{{list}}" wx:key="key" wx:for-index="idx">
        <input type="text" placeholder="请输入孩子姓名" id="studentName" @input="bindForm" id="value" data-idx="{{idx}}" value="{{item.value}}"/>
        <picker class="picker" mode="selector" value="{{item.activeIndex}}" range="{{item.relationship}}" range-key="name" @change="bindForm" data-idx="{{idx}}" id="activeIndex">
          <text>的{{item.relationship[item.activeIndex].name}}</text>
          <text class="iconfont icon-arrow-right font-30"></text>
        </picker>
        <view class="icon-wrapper" @tap="delete({{idx}})">
          <text class="iconfont icon-delete" wx:if="{{idx > 0}}"></text>
        </view>
      </view>
    </block>
    <block wx:if="{{currentType === 'teacher'}}">
      <view class="flex-wrapper center choose-item">
        <input type="text" placeholder="请输入您的姓名" id="teacherName" @input="pickerChange" id="teacherName" value="{{teacherName}}"/>
      </view>
    </block>
  </view>
  <view class="fixed-bottom-btn top flex-wrapper fixed-bottom-btn-1">
    <view class="btn-white" @tap="addNew" wx:if="{{currentType === 'parents'}}">增加多胞胎学生</view>
    <view @tap="submit">确认提交</view>
  </view>
</template>

<script>
import wepy from 'wepy'
import { connect, getStore } from 'wepy-redux'
import { saveIdentityList } from '../store/actions'
import { getIdentityList, bindIdentity, identityList, bindTeacher } from '../api/user'
import { addClass } from '../api/createClass'
import { showMsg, isEmptyString } from '../utils/common'
let store = getStore()

@connect({
  relationship(state){
    return state.zone.relationship
  }
})
export default class bindRelationship extends wepy.page {
  config = {
    navigationBarTitleText: '身份绑定'
  }
  data = {
    parentIndex: 0,
    canSubmit: false,
    studentName: '',
    teacherName: '',
    list: [],
    memberInfo: null,
    classInfo: null,
    classId: -1,
    joinClassId: 0,
    classIdentityList: [],
    type: 'create',
    key: '',
    currentType: 'parents',
    relationshipTypes: [
      {
        checked: true,
        label: '我是家长',
        value: 'parents'
      },
      {
        checked: false,
        label: '我是教师',
        value: 'teacher'
      }
    ]
  }
  watch = {
    relationship(newValue, oldValue) {
      if (!oldValue.length && newValue.length && (this.type === 'create' || this.type === 'join')) {
        // 从redux-store第一次取值，需要初始化一个input输入框
        this.addNewFn()
      }
    },
    studentName (newValue, oldValue) {
      this.canSubmit = !isEmptyString(newValue)
    }
  }
  onShow() {
    // 第一次进来初始化获取relationship的时候，length此时为0，和上面的watch是不会同时执行的
    if (this.relationship.length && (this.type === 'create' || this.type === 'join')) {
      this.addNewFn()
    }
  }
  onLoad(e) {
    !this.relationship.length && saveIdentityList()
    this.memberInfo = wx.getStorageSync('memberInfo')
    this.classInfo = wx.getStorageSync('classInfo')
    this.joinClassId = Number(e.id)
    this.key = e.key
    this.type = e.type
    this.type === 'edit' && this.getClassIdentity()
    this.$apply()
  }
  addClassCallback(data, filterList) {
    addClass(Object.assign({}, data, {
      item: filterList
    })).then(res => {
      this.commonFn(res)
    })
  }
  joinClassCallback(id, filterList) {
    bindIdentity({
      class_id: id,
      item: filterList
    }).then(res => {
      if (res.data.success) {
        showMsg('成功绑定身份')
        setTimeout(() => {
          wx.switchTab({url: 'zone'})
        }, 2000)
      }
    })
  }
  teacherCallback() {
    bindTeacher({
      class_id: this.classInfo.id,
      name: this.teacherName
    }).then(res => {
      if (res.data.success) {
        wx.switchTab({url: 'zone'})
      }
    })
  }
  commonFn(res) {
    if (res.data.success) {
      showMsg('班级创建成功')
      let data = res.data.data
      wx.setStorage({
        key: 'classInfo',
        data: data
      })
      let url = `createClassSuccess?name=${data.name}&code=${data.qr_code}&key=${data.join_key}&classId=${data.id}`
      this.$parent.globalData.classHasChange = true
      setTimeout(() => {
        wx.navigateTo({
          url: url
        })
      }, 1000)
    }
  }
  getClassIdentity() {
    identityList({
      class_id: this.classInfo.id
    }).then(res => {
      const list = res.data.list
      const teacherObj = list.filter(item => item.app_type === 'teacher')
      const parentList = list.filter(item => item.app_type === 'student')
      this.list = parentList.map(item => {
        return {
          relationship: this.relationship,
          value: item.student.name,
          activeIndex: item.identity.id - 1,
          id: item.id
        }
      })
      if (this.teacherObj && this.teacherObj.length) {
        this.teacherName = teacherObj[0].teacher.name
      }
      this.$apply()
    })
  }
  addNewFn() {
    const item = {
      relationship: this.relationship,
      value: '',
      activeIndex: 0
    }
    this.list.push(item)
    this.$apply()
  }
  methods = {
    pickerChange(e) {
      this[e.currentTarget.id] = e.detail.value
      this.$apply()
    },
    delete(idx) {
      this.list.splice(idx, 1)
      this.$apply()
    },
    addNew() {
      this.addNewFn()
    },
    bindForm(e) {
      const target = e.currentTarget
      const idx = target.dataset.idx
      this.list[idx][target.id] = e.detail.value
      this.$apply()
    },
    submit() {
      if (this.currentType === 'parents' && !this.checkData()) {
        showMsg('请填写您孩子姓名')
        return
      }
      this.checkCanSubmit()
      let filterList = this.list.map(item => {
        return {
          identity_id: item.relationship[item.activeIndex].id,
          student_name: item.value,
        }
      })
      if (this.type === 'edit' && this.currentType=== 'parents') { // 如果是直接修改身份绑定
        filterList = this.list.map(item => {
          return {
            identity_id: item.relationship[item.activeIndex].id,
            student_name: item.value,
            member_identity_id: item.id
          }
        })
        this.joinClassCallback(this.classInfo.id, filterList)
      } else if (this.type === 'edit' && this.currentType === 'teacher') {// 如果是直接修改身份绑定
        this.teacherCallback()
      } else if (this.type === 'create') { // 如果是创建班级得
        let createClassData = this.$parent.globalData.createClass
        let data = {
          school_id: createClassData.school_id,
          grade_type: createClassData.grade,
          year_class: createClassData.year,
          class: createClassData.class
        }
        if (this.currentType === 'teacher') {
          let item = {
            type: 'teacher',
            list: [{name: this.teacherName}]
          }
          this.addClassCallback(data, item)
        } else {
          let item = {
            type: 'partiarch',
            list: filterList
          }
          this.addClassCallback(data, item)
        }
      } else if (this.type === 'join' && this.currentType === 'parents') { // 如果是加入班级
        this.joinClassCallback(this.joinClassId, filterList)
      }
    }
  }
  checkCanSubmit() {
    if (this.currentType === 'teacher' && isEmptyString(this.teacherName)) {
      showMsg('如果您勾选了老师身份，请填写您的姓名')
      return false
    }
    return true
  }
  checkData() {
    let canSubmit = true
    for (let i = 0, len = this.list.length; i < len; i++) {
      if (isEmptyString(this.list[i].value)) {
        canSubmit = false
        break
      } else {
        canSubmit = true
      }
    }
    return canSubmit
  }
}
</script>

<style lang="scss">
.radio-group {
  text-align: center;
  padding: 40rpx 0 80rpx 0;
}
.icon-wrapper {
  width: 10%;
}
.icon-delete {
  padding-left: 20rpx;
}
.fixed-bottom-btn {
  & > view {
    flex: 1;
    &.btn-white {
      background-color: #fff;
    }
  }
}
.remind-text {
  padding-bottom: 20rpx;
  .red {
    color: #982424;
    margin-right: 20rpx;
  }
}
.choose-tag {
  position: relative;
  width: 30rpx;
  height: 30rpx;
  border: 6rpx solid #2DB200;
  margin-right: 30rpx;
  border-radius: 50%;
}
.choose-tag-inner {
  position: absolute;
  width: 15rpx;
  height: 15rpx;
  background-color: #2DB200;
  opacity: .8;
  left: 0;
  right: 0;
  bottom: 0;
  top: 0;
  margin: auto;
  border-radius: 50%;
}
.choose-item {
  margin-bottom: 30rpx;
}
.choose-item input {
  padding:20rpx 0;
  background-color:#fff;
  flex: 1;
  padding-left: 30rpx;
}
.choose-item .picker {
  padding:20rpx 0;
  width: 140rpx;
  margin-left: 30rpx;
  background-color: #fff;
  min-height: 1.4rem;
  line-height: 1.4rem;
  text-align: center;
}
</style>
